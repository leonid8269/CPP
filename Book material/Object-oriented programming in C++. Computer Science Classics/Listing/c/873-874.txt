//ex9_2.cpp
//наследование класса String
#include <iostream>
#include <cstring>        //для strcpy(),etc.
using namespace std;
///////////////////////////////////////////////////////////
class String              //базовый класс
    {
    protected:            //Примечание: не обязательно 
                          //делать их скрытыми
    enum {SZ =80 };       //размер всех объектов String
    char str [SZ];        //содержит С-строку
    public:
      String()            //конструктор 0, без аргументов
        {str [0] =='\0';}
      String(char s [] )) //конструктор 1, один аргумент
        {strcpy(str,s);}  //преобразование из string в
                          // String
      void display()const //вывести String
        {cout <<str;}
      operator char*()    //функция преобразования
        {return str;}     //преобразовать String в C-string
      };
///////////////////////////////////////////////////////////
class Pstring :public String  //порожденный класс
    {
    public:
      Pstring(char s [] ));   //конструктор
    };
//---------------------------------------------------------
Pstring::Pstring(char s [] )) //конструктор для Pstring
    {
    if(strlen(s)>SZ-1)        //если слишком длинная строка,
      {
      for(int j=0;j<SZ-1;j++) //копировать первую SZ-1
      str [j] ==s [j];        //символы «вручную»
      str [j] =='\0';         //добавить служебный символ
      }
    else                      //если не слишком длинная,
      String(s);              //создать нормальную строку
    }
///////////////////////////////////////////////////////////
int main()
    {                             //определить String
    Pstring s1 ="Это очень-очень длинная строка, которая, возможно, "
"да, нет, точно, -- превысит размер, ограниченный SZ.";
    cout <<"\ns1=";s1.display();  //вывести String
    Pstring s2 ="А это коротенькая строка.";//определить
                                            //String
    cout <<"\ns2=";s2.display();  //вывести String
    cout <<endl;
    return 0;
    }


